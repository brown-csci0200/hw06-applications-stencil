# classes.py - Classes for representing a Linked List and Tree
# DO NOT EDIT THIS FILE
#
from dataclasses import dataclass, field
from typing import Optional

@dataclass
class ListNode:
    val: int = 0
    next: Optional["ListNode"] = None # "Optional" here says that the "next" field 
                                      # may contain either a ListNode or None

    def __init__(self, val: int=0, next: "Optional[ListNode]"=None):
        self.val = val       # Value of this node (an int)
        self.next = next   # Next node (a ListNode, or None)

    def __str__(self) -> str:
        return f'ListNode({self.val}, {self.next})'
    
@dataclass
class TreeNode:
    val: int = 0
    left: Optional["TreeNode"] = None   # "Optional" here says that the "left" and "right"
    right: Optional["TreeNode"] = None  # fields may contain either a TreeNode or None

    def __init__(self, val: int=0, 
                    left: "Optional[TreeNode]"=None, 
                    right: "Optional[TreeNode]"=None):
        self.val = val      # Value of this node (an int)
        self.left = left    # Left node (a TreeNode, or None)
        self.right = right  # Right node (a TreeNode, or None)

    def __str__(self) -> str:
        return f'TreeNode({self.val}, {self.left}, {self.right})'

