# DO NOT EDIT THIS FILE

from classes import ListNode, TreeNode

def arr_to_listnode(arr: list[int]) -> ListNode:
    """
    **Should only be used in testing.**

    Given a list of integers arr, converts it to an equal representation as a 
    series of nested ListNode objects (to resemble a Singly Linked List).

    Args:
    - arr (list[int]): The list of integers to be converted.

    Returns:
    - ListNode: The input array converted to nested ListNode form.
    """

    size = len(arr)

    head: ListNode = ListNode(arr[0], None) if size > 0 else None
    curr = head

    for i in range(1, size):
        curr.next = ListNode(arr[i], None)
        curr = curr.next

    return head

def listnode_to_arr(head: ListNode) -> list[int]:
    """
    **Should only be used in testing.**

    Given a ListNode (which may or may not form a smaller part of a larger 
    list), transform its values sequentially into an array with those
    same values in the same order.

    Args:
    - head (ListNode): The ListNode to be converted to a list.

    Returns:
    - list[int]: The input ListNode converted to list form with the same 
    values in the same order.
    """
    arr = []
    curr = head
    while curr != None:
        arr.append(curr.val)
        curr = curr.next
    return arr

def arr_to_bst(arr: list[int]) -> TreeNode:
    """
    **Should only be used in testing.**

    Given a list of integers arr, converts it to an equal representation as a 
    binary tree. Each element in the array is created in-order as a TreeNode
    in the BST starting at the top-layer and moving downwards.

    DISCLAIMER: This function will not re-arrange its input to create a BST.
        - If the input is provided such that the array can be converted in-order 
        to a BST, then the returned TreeNode will be a BST. 
        - If the input is provided such that the array does not resemble a BST, 
        then only a binary tree will be returned.

    Args:
    - arr (list[int]): The list of integers to be converted.

    Returns:
    - TreeNode: The input array converted to a BST 
    (or binary tree if improperly formed input array)
    """

    def arr_to_bst_helper(arr: list[int], curr_index: int, max_index: int) -> TreeNode:
    
        return TreeNode(arr[curr_index], 
                        arr_to_bst_helper(arr, 2*curr_index + 1, max_index) if 2*curr_index + 1 <= max_index else None, 
                        arr_to_bst_helper(arr, 2*curr_index + 2, max_index) if 2*curr_index + 2 <= max_index else None) \
                if arr[curr_index] != None else None

    size = len(arr)
    
    if(size == 0):
        return None

    return arr_to_bst_helper(arr, 0, size - 1)

